New ScopeTable with id 0 created

At line no: 1 : type_specifier : INT

int

At line no: 1 : type_specifier : INT

int

At line no: 1 : parameter_list : type_specifier ID

int n

At line no: 2 : variable : ID

n

At line no: 2 : factor : variable

n

At line no: 2 : unary_expression : factor

n

At line no: 2 : term : unary_expression

n

At line no: 2 : simple_expression : term

n

At line no: 2 : factor : CONST_INT

1

At line no: 2 : unary_expression : factor

1

At line no: 2 : term : unary_expression

1

At line no: 2 : simple_expression : term

1

At line no: 2 : rel_expression : simple_expression RELOP simple_expression

n==1

At line no: 2 : logic_expression : rel_expression

n==1

At line no: 2 : expression : logic_expression

n==1

New ScopeTable with id 2 created

At line no: 3 : factor : CONST_INT

0

At line no: 3 : unary_expression : factor

0

At line no: 3 : term : unary_expression

0

At line no: 3 : simple_expression : term

0

At line no: 3 : rel_expression : simple_expression

0

At line no: 3 : logic_expression : rel_expression

0

At line no: 3 : expression : logic_expression

0

At line no: 3 : statement : RETURN expression SEMICOLON

return 0;


At line no: 3 : statements : statement

return 0;


At line no: 4 : compound_statement : LCURL statements RCURL

{
return 0;
}

ScopeTable # 2

ScopeTable # 1
 20 --> < n : ID>  

ScopeTable # 0
 12 --> < f : ID>  

ScopeTable with id 2 removed

At line no: 4 : statement : compound_statement

{
return 0;
}


At line no: 5 : statement : IF LPAREN expression RPAREN statement

if(n==1){
return 0;
}


At line no: 5 : statements : statement

if(n==1){
return 0;
}


At line no: 5 : variable : ID

n

At line no: 5 : factor : variable

n

At line no: 5 : unary_expression : factor

n

At line no: 5 : term : unary_expression

n

At line no: 5 : simple_expression : term

n

At line no: 5 : factor : CONST_INT

2

At line no: 5 : unary_expression : factor

2

At line no: 5 : term : unary_expression

2

At line no: 5 : simple_expression : term

2

At line no: 5 : rel_expression : simple_expression RELOP simple_expression

n==2

At line no: 5 : logic_expression : rel_expression

n==2

At line no: 5 : expression : logic_expression

n==2

New ScopeTable with id 3 created

At line no: 6 : factor : CONST_INT

1

At line no: 6 : unary_expression : factor

1

At line no: 6 : term : unary_expression

1

At line no: 6 : simple_expression : term

1

At line no: 6 : rel_expression : simple_expression

1

At line no: 6 : logic_expression : rel_expression

1

At line no: 6 : expression : logic_expression

1

At line no: 6 : statement : RETURN expression SEMICOLON

return 1;


At line no: 6 : statements : statement

return 1;


At line no: 7 : compound_statement : LCURL statements RCURL

{
return 1;
}

ScopeTable # 3

ScopeTable # 1
 20 --> < n : ID>  

ScopeTable # 0
 12 --> < f : ID>  

ScopeTable with id 3 removed

At line no: 7 : statement : compound_statement

{
return 1;
}


At line no: 8 : statement : IF LPAREN expression RPAREN statement

if(n==2){
return 1;
}


At line no: 8 : statements : statements statement

if(n==1){
return 0;
}
if(n==2){
return 1;
}


At line no: 8 : variable : ID

n

At line no: 8 : factor : variable

n

At line no: 8 : unary_expression : factor

n

At line no: 8 : term : unary_expression

n

At line no: 8 : simple_expression : term

n

At line no: 8 : factor : CONST_INT

3

At line no: 8 : unary_expression : factor

3

At line no: 8 : term : unary_expression

3

At line no: 8 : simple_expression : term

3

At line no: 8 : rel_expression : simple_expression RELOP simple_expression

n==3

At line no: 8 : logic_expression : rel_expression

n==3

At line no: 8 : expression : logic_expression

n==3

New ScopeTable with id 4 created

At line no: 9 : factor : CONST_INT

1

At line no: 9 : unary_expression : factor

1

At line no: 9 : term : unary_expression

1

At line no: 9 : simple_expression : term

1

At line no: 9 : rel_expression : simple_expression

1

At line no: 9 : logic_expression : rel_expression

1

At line no: 9 : expression : logic_expression

1

At line no: 9 : statement : RETURN expression SEMICOLON

return 1;


At line no: 9 : statements : statement

return 1;


At line no: 10 : compound_statement : LCURL statements RCURL

{
return 1;
}

ScopeTable # 4

ScopeTable # 1
 20 --> < n : ID>  

ScopeTable # 0
 12 --> < f : ID>  

ScopeTable with id 4 removed

At line no: 10 : statement : compound_statement

{
return 1;
}


At line no: 11 : statement : IF LPAREN expression RPAREN statement

if(n==3){
return 1;
}


At line no: 11 : statements : statements statement

if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}


At line no: 11 : variable : ID

n

At line no: 11 : factor : variable

n

At line no: 11 : unary_expression : factor

n

At line no: 11 : term : unary_expression

n

At line no: 11 : simple_expression : term

n

At line no: 11 : factor : CONST_INT

1

At line no: 11 : unary_expression : factor

1

At line no: 11 : term : unary_expression

1

At line no: 11 : simple_expression : simple_expression ADDOP term

n-1

At line no: 11 : rel_expression : simple_expression

n-1

At line no: 11 : logic_expression : rel_expression

n-1

At line no: 11 : arguments : logic_expression

n-1

At line no: 11 : argument_list : arguments

n-1

At line no: 11 : factor : ID LPAREN argument_list RPAREN

f(n-1)

At line no: 11 : unary_expression : factor

f(n-1)

At line no: 11 : term : unary_expression

f(n-1)

At line no: 11 : simple_expression : term

f(n-1)

At line no: 11 : variable : ID

n

At line no: 11 : factor : variable

n

At line no: 11 : unary_expression : factor

n

At line no: 11 : term : unary_expression

n

At line no: 11 : simple_expression : term

n

At line no: 11 : factor : CONST_INT

2

At line no: 11 : unary_expression : factor

2

At line no: 11 : term : unary_expression

2

At line no: 11 : simple_expression : simple_expression ADDOP term

n-2

At line no: 11 : rel_expression : simple_expression

n-2

At line no: 11 : logic_expression : rel_expression

n-2

At line no: 11 : arguments : logic_expression

n-2

At line no: 11 : argument_list : arguments

n-2

At line no: 11 : factor : ID LPAREN argument_list RPAREN

f(n-2)

At line no: 11 : unary_expression : factor

f(n-2)

At line no: 11 : term : unary_expression

f(n-2)

At line no: 11 : simple_expression : simple_expression ADDOP term

f(n-1)+f(n-2)

At line no: 11 : variable : ID

n

At line no: 11 : factor : variable

n

At line no: 11 : unary_expression : factor

n

At line no: 11 : term : unary_expression

n

At line no: 11 : simple_expression : term

n

At line no: 11 : factor : CONST_INT

3

At line no: 11 : unary_expression : factor

3

At line no: 11 : term : unary_expression

3

At line no: 11 : simple_expression : simple_expression ADDOP term

n-3

At line no: 11 : rel_expression : simple_expression

n-3

At line no: 11 : logic_expression : rel_expression

n-3

At line no: 11 : arguments : logic_expression

n-3

At line no: 11 : argument_list : arguments

n-3

At line no: 11 : factor : ID LPAREN argument_list RPAREN

f(n-3)

At line no: 11 : unary_expression : factor

f(n-3)

At line no: 11 : term : unary_expression

f(n-3)

At line no: 11 : simple_expression : simple_expression ADDOP term

f(n-1)+f(n-2)+f(n-3)

At line no: 11 : rel_expression : simple_expression

f(n-1)+f(n-2)+f(n-3)

At line no: 11 : logic_expression : rel_expression

f(n-1)+f(n-2)+f(n-3)

At line no: 11 : expression : logic_expression

f(n-1)+f(n-2)+f(n-3)

At line no: 11 : statement : RETURN expression SEMICOLON

return f(n-1)+f(n-2)+f(n-3);


At line no: 11 : statements : statements statement

if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);


At line no: 12 : compound_statement : LCURL statements RCURL

{
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}

ScopeTable # 1
 20 --> < n : ID>  

ScopeTable # 0
 12 --> < f : ID>  

ScopeTable with id 1 removed

At line no: 12 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int n){
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}


At line no: 12 : unit : func_definition

int f(int n){
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}


At line no: 12 : program : unit

int f(int n){
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}


At line no: 14 : type_specifier : INT

int

At line no: 14 : type_specifier : INT

int

At line no: 14 : parameter_list : type_specifier ID

int a

At line no: 14 : type_specifier : INT

int

At line no: 14 : parameter_list : parameter_list COMMA type_specifier ID

int a,int b

New ScopeTable with id 5 created

At line no: 15 : type_specifier : INT

int

At line no: 15 : declaration_list : ID

x

At line no: 15 : var_declaration : type_specifier declaration_list SEMICOLON

int x;

At line no: 15 : statement : var_declaration

int x;


At line no: 15 : statements : statement

int x;


At line no: 16 : variable : ID

x

At line no: 16 : variable : ID

a

At line no: 16 : factor : variable

a

At line no: 16 : unary_expression : factor

a

At line no: 16 : term : unary_expression

a

At line no: 16 : simple_expression : term

a

At line no: 16 : rel_expression : simple_expression

a

At line no: 16 : logic_expression : rel_expression

a

At line no: 16 : arguments : logic_expression

a

At line no: 16 : argument_list : arguments

a

At line no: 16 : factor : ID LPAREN argument_list RPAREN

f(a)

At line no: 16 : unary_expression : factor

f(a)

At line no: 16 : term : unary_expression

f(a)

At line no: 16 : simple_expression : term

f(a)

At line no: 16 : variable : ID

a

At line no: 16 : factor : variable

a

At line no: 16 : unary_expression : factor

a

At line no: 16 : term : unary_expression

a

At line no: 16 : simple_expression : simple_expression ADDOP term

f(a)+a

At line no: 16 : variable : ID

b

At line no: 16 : factor : variable

b

At line no: 16 : unary_expression : factor

b

At line no: 16 : term : unary_expression

b

At line no: 16 : simple_expression : simple_expression ADDOP term

f(a)+a+b

At line no: 16 : rel_expression : simple_expression

f(a)+a+b

At line no: 16 : logic_expression : rel_expression

f(a)+a+b

At line no: 16 : expression : variable ASSIGNOP logic_expression

x=f(a)+a+b

At line no: 16 : expression_statement : expression SEMICOLON

x=f(a)+a+b;

At line no: 16 : statement : expression_statement

x=f(a)+a+b;


At line no: 16 : statements : statements statement

int x;
x=f(a)+a+b;


At line no: 17 : variable : ID

x

At line no: 17 : factor : variable

x

At line no: 17 : unary_expression : factor

x

At line no: 17 : term : unary_expression

x

At line no: 17 : simple_expression : term

x

At line no: 17 : rel_expression : simple_expression

x

At line no: 17 : logic_expression : rel_expression

x

At line no: 17 : expression : logic_expression

x

At line no: 17 : statement : RETURN expression SEMICOLON

return x;


At line no: 17 : statements : statements statement

int x;
x=f(a)+a+b;
return x;


At line no: 18 : compound_statement : LCURL statements RCURL

{
int x;
x=f(a)+a+b;
return x;
}

ScopeTable # 5
 0 --> < x : ID>  
 7 --> < a : ID>  
 8 --> < b : ID>  

ScopeTable # 0
 12 --> < f : ID>  
 13 --> < g : ID>  

ScopeTable with id 5 removed

At line no: 18 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


At line no: 18 : unit : func_definition

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


At line no: 18 : program : program unit

int f(int n){
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


At line no: 20 : type_specifier : INT

int

New ScopeTable with id 6 created

At line no: 21 : type_specifier : INT

int

At line no: 21 : declaration_list : ID

a

At line no: 21 : declaration_list : declaration_list COMMA ID

a,b

At line no: 21 : var_declaration : type_specifier declaration_list SEMICOLON

int a,b;

At line no: 21 : statement : var_declaration

int a,b;


At line no: 21 : statements : statement

int a,b;


At line no: 22 : variable : ID

a

At line no: 22 : factor : CONST_INT

4

At line no: 22 : unary_expression : factor

4

At line no: 22 : term : unary_expression

4

At line no: 22 : simple_expression : term

4

At line no: 22 : rel_expression : simple_expression

4

At line no: 22 : logic_expression : rel_expression

4

At line no: 22 : expression : variable ASSIGNOP logic_expression

a=4

At line no: 22 : expression_statement : expression SEMICOLON

a=4;

At line no: 22 : statement : expression_statement

a=4;


At line no: 22 : statements : statements statement

int a,b;
a=4;


At line no: 23 : variable : ID

b

At line no: 23 : factor : CONST_INT

2

At line no: 23 : unary_expression : factor

2

At line no: 23 : term : unary_expression

2

At line no: 23 : simple_expression : term

2

At line no: 23 : rel_expression : simple_expression

2

At line no: 23 : logic_expression : rel_expression

2

At line no: 23 : expression : variable ASSIGNOP logic_expression

b=2

At line no: 23 : expression_statement : expression SEMICOLON

b=2;

At line no: 23 : statement : expression_statement

b=2;


At line no: 23 : statements : statements statement

int a,b;
a=4;
b=2;


At line no: 24 : variable : ID

a

At line no: 24 : variable : ID

a

At line no: 24 : factor : variable

a

At line no: 24 : unary_expression : factor

a

At line no: 24 : term : unary_expression

a

At line no: 24 : simple_expression : term

a

At line no: 24 : rel_expression : simple_expression

a

At line no: 24 : logic_expression : rel_expression

a

At line no: 24 : arguments : logic_expression

a

At line no: 24 : variable : ID

b

At line no: 24 : factor : variable

b

At line no: 24 : unary_expression : factor

b

At line no: 24 : term : unary_expression

b

At line no: 24 : simple_expression : term

b

At line no: 24 : rel_expression : simple_expression

b

At line no: 24 : logic_expression : rel_expression

b

At line no: 24 : arguments : arguments COMMA logic_expression

a,b

At line no: 24 : argument_list : arguments

a,b

At line no: 24 : factor : ID LPAREN argument_list RPAREN

g(a,b)

At line no: 24 : unary_expression : factor

g(a,b)

At line no: 24 : term : unary_expression

g(a,b)

At line no: 24 : simple_expression : term

g(a,b)

At line no: 24 : rel_expression : simple_expression

g(a,b)

At line no: 24 : logic_expression : rel_expression

g(a,b)

At line no: 24 : expression : variable ASSIGNOP logic_expression

a=g(a,b)

At line no: 24 : expression_statement : expression SEMICOLON

a=g(a,b);

At line no: 24 : statement : expression_statement

a=g(a,b);


At line no: 24 : statements : statements statement

int a,b;
a=4;
b=2;
a=g(a,b);


At line no: 25 : statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);


At line no: 25 : statements : statements statement

int a,b;
a=4;
b=2;
a=g(a,b);
println(a);


At line no: 26 : factor : CONST_INT

0

At line no: 26 : unary_expression : factor

0

At line no: 26 : term : unary_expression

0

At line no: 26 : simple_expression : term

0

At line no: 26 : rel_expression : simple_expression

0

At line no: 26 : logic_expression : rel_expression

0

At line no: 26 : expression : logic_expression

0

At line no: 26 : statement : RETURN expression SEMICOLON

return 0;


At line no: 26 : statements : statements statement

int a,b;
a=4;
b=2;
a=g(a,b);
println(a);
return 0;


At line no: 27 : compound_statement : LCURL statements RCURL

{
int a,b;
a=4;
b=2;
a=g(a,b);
println(a);
return 0;
}

ScopeTable # 6
 7 --> < a : ID>  
 8 --> < b : ID>  

ScopeTable # 0
 1 --> < main : ID>  
 12 --> < f : ID>  
 13 --> < g : ID>  

ScopeTable with id 6 removed

At line no: 27 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b;
a=4;
b=2;
a=g(a,b);
println(a);
return 0;
}


At line no: 27 : unit : func_definition

int main(){
int a,b;
a=4;
b=2;
a=g(a,b);
println(a);
return 0;
}


At line no: 27 : program : program unit

int f(int n){
if(n==1){
return 0;
}
if(n==2){
return 1;
}
if(n==3){
return 1;
}
return f(n-1)+f(n-2)+f(n-3);
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}
int main(){
int a,b;
a=4;
b=2;
a=g(a,b);
println(a);
return 0;
}



At line no: 28 : start : program



Symbol Table :

ScopeTable # 0
 1 --> < main : ID>  
 12 --> < f : ID>  
 13 --> < g : ID>  

Total Lines: 28

Total errors: 0

